#!/bin/sh

# github api reference
# https://developer.github.com/v3/
# Written By: Brian  and update by Richard Ressler to handle Git credential
# manager in Windows. Also streamlined to focus on student repos generated by
# github classroom of the form assignment-githubID

# Note that GitHub API no longer accepts passwords so you must use an PAT
# If you get an error message that basename is missing an operator, that is
# usually due to a bad PAT and GitHub returns no records so there are no urls



if [[ $# -ne 4 ]];
	then
	echo ""
	echo "This script will clone groups of repos from an organization using an identifier"
	echo "This identifier can be the name of the assignment for github classroom repos"
	echo "or some common identifier across multiple repos"
	echo ""
	echo "Please provide 4 parameters in this order:"
	echo "1. Name of Organization (GitHubClassroom)"
	echo "2. Name of Identifier (assignment)"
	echo "3. Your github username"
	echo "4. The protocol for cloning the repo (ssh/https)"
	echo ""
	echo "note: To use ssh, you must set up an ssh key with github"
	echo "You may find it useful to set up your shell to know your GitHub credentials for https"
else
	organization=$1
	assignment=$2
	githubUsername=$3
	protocol=$4

	if [ "$protocol" == "https" ];
		then
		protocol="clone_url"
		echo "Using https"
	else
		protocol="ssh_url"
		echo "Using ssh"
	fi

#	echo "Enter Github Personal Access Token:"
#	read  -s githubPassword

# For windows machine if git credential manager was selected
# git credential fill must be set up with a multi-line input
# and returns a multi line output to stdoutput including the PAT
# as the password element
githubPassword=$(echo "host=github.com
protocol=https
path=$organization"| git credential fill )
# echo  requires the use of no quotes to collapse githubPasswordto one line
# for grep
# grep uses the -Po option for perl Regex to allow the use of the regex look-behind
# and not keep 'password='' in the output - just the PAT
githubPassword=$(echo $githubPassword | grep -Po "(?<= password=).*")
githubPassword=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

	# Get the first page of repo results (100 entries)
	rawJSON=$(curl --user  "$githubUsername:$githubPassword" "https://api.github.com/orgs/$organization/repos?per_page=100")

	# Get the line that tells if this is the last page
    numRepos=$(echo "$rawJSON" | grep -o "full_name" | wc -l)
	page=2

	# While we have not seen the last page
	while [[ "$numRepos" -eq "100" ]]; do
		# Get next page
		tempJSON=$(curl --user  "$githubUsername:$githubPassword" "https://api.github.com/orgs/$organization/repos?per_page=100&page=$page")
		numRepos=$(echo "$tempJSON" | grep -o "full_name" | wc -l)

		#concatenate tempJSON on to rawJSON
		rawJSON=$rawJSON$tempJSON
		((page++))
	done

	# grep full lines that have the same assignment identifier
	fullLines=$(echo "$rawJSON" | grep "$assignment" )

	# grep just the url
	 justURLs=$(echo "$fullLines" | grep -o "https://github.com/"$organization"/"$assignment"-*.*\.git")

	((lengthOfIdentifier=${#assignment}+2))


	# Make subdirectory and move to it
	mkdir -p ../${assignment}
	cd ../${assignment}
# redirect urls into loop  at bottom of while loop - line 111
	while read -r url; do
		echo " "
		echo "---"${url}

		dir=$(basename ${url})
		dir=${dir//.git}
		if [ -d ${dir} ]; then
			git -C ${dir} pull
		else
			git clone ${url}
		fi
	done <<< "$justURLs"
fi
