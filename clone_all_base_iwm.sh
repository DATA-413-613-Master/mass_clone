#!/bin/sh

# github api reference https://developer.github.com/v3/
# Written By: Richard Ressler based on work by Brian Konzman
# Focuses on student repos generated by
# github classroom of the form assignment-githubID

# Note: the GitHub API no longer accepts passwords so you must use a PAT
# If you get an error message that 'basename is missing an operator', that is
# usually due to a bad PAT and GitHub returns no records so there are no urls.


if [[ $# -ne 7 ]];
	then
	echo ""
	echo "This script will clone groups of repos from an organization using an assignment identifier"
	echo "The identifier can be the name of the assignment, e.g., hw01 for the github classroom repos"
	echo "or some common identifier across multiple repos"
	echo ""
	echo "Please provide 7 arguments in this order (or use the clone"
	echo "1. Name of Organization (GitHubClassroom)"
	echo "2. Name of Identifier (assignment)"
	echo "3. Your github username"
	echo "4. The protocol for cloning the repo (ssh/https)"
	echo "5. The mode for accessing the PAT: interactive, mac, or windows"
	echo "6. If mode is mac, the mac OS user account name."
  echo "7. If mode is mac, the MAC OS keychain name for the GitHub personal access token."
	echo ""
	echo "note: To use ssh, you must set up an ssh key with github"
	echo "You may find it useful to set up your shell to know your GitHub credentials for https"
else
	organization=$1
	assignment=$2
	githubUsername=$3
	protocol=$4
	mode=$5
	mac_user_name=$6
	mac_keychain_name=$7

	if [ "$protocol" == "https" ];
		then
		protocol="clone_url"
		echo "Using https"
	else
		protocol="ssh_url"
		echo "Using ssh"
	fi

# Use mode to get PAT as githubPassword
  if [ "$mode" == "interactive" ];
    then
  	echo "Enter Github Personal Access Token:"
  	read  -s githubPassword
  elif [ "$mode" == "mac" ];
  then
    githubPassword=`security find-internet-password -a $mac_user_name -s $mac_keychain_name -w`
  else
    # For mode windows using git credential manager
    # git credential fill must be set up with a multi-line input
    # it returns a multi line output to stdoutput including the PAT
    # as the password element

    githubPassword=$(echo "host=github.com
    protocol=https
    path=$organization"| git credential fill )

    # echo  requires the use of no quotes to collapse githubPassword to one line
    # for grep
    # grep uses the -Po option for perl Regex to allow the use of the regex look-behind
    # and not keep 'password=' in the output - just the PAT

    githubPassword=$(echo $githubPassword | grep -Po "(?<= password=).*")
  fi

	# Get the first page of repo results (100 entries)
	rawJSON=$(curl --user  "$githubUsername:$githubPassword" "https://api.github.com/orgs/$organization/repos?per_page=100")

	# Get the line that tells if this is the last page
    numRepos=$(echo "$rawJSON" | grep -o "full_name" | wc -l)
	page=2

	# While we have not seen the last page
	while [[ "$numRepos" -eq "100" ]]; do
		# Get next page
		tempJSON=$(curl --user  "$githubUsername:$githubPassword" "https://api.github.com/orgs/$organization/repos?per_page=100&page=$page")
		numRepos=$(echo "$tempJSON" | grep -o "full_name" | wc -l)

		#concatenate tempJSON on to rawJSON
		rawJSON=$rawJSON$tempJSON
		((page++))
	done

	# grep full lines that have the same assignment identifier
	fullLines=$(echo "$rawJSON" | grep "$assignment" )

	# grep just the url
	 justURLs=$(echo "$fullLines" | grep -o "https://github.com/"$organization"/"$assignment"-*.*\.git")

	((lengthOfIdentifier=${#assignment}+2))

	# Make subdirectory and move to it
	mkdir -p ../${assignment}
	cd ../${assignment}
# redirect urls into loop  at bottom of while loop - line 111
	while read -r url; do
		echo " "
		echo "---"${url}

		dir=$(basename ${url})
		dir=${dir//.git}
		if [ -d ${dir} ]; then
			git -C ${dir} pull
		else
			git clone ${url}
		fi
	done <<< "$justURLs"
fi
